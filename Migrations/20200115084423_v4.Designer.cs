// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Twitter.Context;

namespace Twitter.Migrations
{
    [DbContext(typeof(TwitterContext))]
    [Migration("20200115084423_v4")]
    partial class v4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Twitter.Entity.Following", b =>
                {
                    b.Property<string>("followedId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("followingId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("followedId", "followingId");

                    b.HasIndex("followingId");

                    b.ToTable("Following");
                });

            modelBuilder.Entity("Twitter.Entity.Like", b =>
                {
                    b.Property<int>("tweetId")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("tweetId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("likes");
                });

            modelBuilder.Entity("Twitter.Entity.Retweet", b =>
                {
                    b.Property<int>("tweetId")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("tweetId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("retweets");
                });

            modelBuilder.Entity("Twitter.Entity.Tweet", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("UserId");

                    b.ToTable("tweets");
                });

            modelBuilder.Entity("Twitter.Entity.User", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("profilePhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Twitter.Entity.Following", b =>
                {
                    b.HasOne("Twitter.Entity.User", "followed")
                        .WithMany("followeds")
                        .HasForeignKey("followedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Twitter.Entity.User", "following")
                        .WithMany("followings")
                        .HasForeignKey("followingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Twitter.Entity.Like", b =>
                {
                    b.HasOne("Twitter.Entity.Tweet", "tweet")
                        .WithMany("likes")
                        .HasForeignKey("tweetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Twitter.Entity.User", "from")
                        .WithMany("likes")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Twitter.Entity.Retweet", b =>
                {
                    b.HasOne("Twitter.Entity.Tweet", "tweet")
                        .WithMany("retweets")
                        .HasForeignKey("tweetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Twitter.Entity.User", "from")
                        .WithMany("retweets")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Twitter.Entity.Tweet", b =>
                {
                    b.HasOne("Twitter.Entity.User", "sender")
                        .WithMany("tweets")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
